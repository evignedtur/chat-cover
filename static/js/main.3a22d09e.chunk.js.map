{"version":3,"sources":["util.ts","CurrentlyPlaying.tsx","admin/admin.tsx","admin/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["loadConfig","localStorage","getItem","resetConfig","JSON","parse","saveConfig","config","clear","setItem","stringify","event","preventDefault","currentlyPlayingPrefix","includeCurrentlyPlaying","color1","color2","nickname","server","spotifyToken","CurrentlyPlaying","props","useState","is_playing","service","setService","token","setToken","useEffect","Axios","get","then","result","data","SpotifyToken","updateSong","item","name","GetSpotifyCurrentlyPlaying","a","headers","Authorization","callback","delay","deps","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","catch","error","console","div","initial","translateY","animate","exit","className","style","width","artists","map","artist","join","Admin","REDIRECT_URI","window","location","protocol","host","pathname","useForm","register","handleSubmit","setConfig","href","encodeURIComponent","toLowerCase","onSubmit","fixedData","htmlFor","type","defaultValue","ref","disabled","onClick","Out","useParams","setWidth","offsetWidth","SpotifyTokenHandler","to","App","basename","path","exact","children","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a22d09e.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport { Config } from './models';\r\n\r\nexport const useInterval = (callback: any, delay: number, deps?: any) => {\r\n\tconst savedCallback = useRef(callback);\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tsavedCallback.current = callback;\r\n\t\t},\r\n\t\t[callback]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tfunction tick() {\r\n\t\t\t\tsavedCallback!.current();\r\n\t\t\t}\r\n\t\t\tif (delay !== null) {\r\n\t\t\t\tlet id = setInterval(tick, delay);\r\n\t\t\t\treturn () => clearInterval(id);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[delay, deps]\r\n\t);\r\n};\r\n\r\nexport const loadConfig = () => {\r\n\tif (!localStorage.getItem('CONFIG')) {\r\n\t\tresetConfig();\r\n\t}\r\n\treturn JSON.parse(localStorage.getItem('CONFIG')!) as Config;\r\n};\r\n\r\nexport const saveConfig = (config: Config) => {\r\n\tlocalStorage.clear();\r\n\tlocalStorage.setItem('CONFIG', JSON.stringify(config));\r\n};\r\n\r\nexport const resetConfig = (event?: any) => {\r\n\tif(event){\r\n\t\tevent.preventDefault();\r\n\t}\r\n\tsaveConfig({\r\n\t\tcurrentlyPlayingPrefix: 'Currently playing',\r\n\t\tincludeCurrentlyPlaying: false,\r\n\t\tcolor1: 'rgb(155,31,31)',\r\n\t\tcolor2: 'rgb(194,76,76)',\r\n\t\tnickname: 'Nickname',\r\n\t\tserver: 'Server',\r\n\t\tspotifyToken: ''\r\n\t});\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport ScrollText from 'react-scroll-text';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { useInterval } from './util';\r\nimport { CurrentlyPlayingProps, SpotifyCurrentlyPlayingResult } from './models';\r\nimport Axios, { AxiosResponse } from 'axios';\r\n\r\nconst CurrentlyPlaying: React.FC<CurrentlyPlayingProps> = props => {\r\n\tconst [service, setService] = useState<SpotifyCurrentlyPlayingResult>({\r\n\t\tis_playing: false\r\n\t});\r\n\tconst [token, setToken] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!token) {\r\n\t\t\tAxios.get(`https://evig-nedtur.herokuapp.com/session/${props.token}`).then(result => {\r\n\t\t\t\tsetToken(result.data.SpotifyToken);\r\n\t\t\t});\r\n\t\t}\r\n\t}, [props.token, token]);\r\n\r\n\tconst updateSong = (result: AxiosResponse<SpotifyCurrentlyPlayingResult>) => {\r\n\t\treturn (\r\n\t\t\tservice &&\r\n\t\t\t((service.item && result.data && result.data.item && service.item.name !== result.data.item.name) ||\r\n\t\t\t\tservice.is_playing !== result.data.is_playing)\r\n\t\t);\r\n\t};\r\n\r\n\tconst GetSpotifyCurrentlyPlaying = async () => {\r\n\t\tconst result = await Axios.get<SpotifyCurrentlyPlayingResult>('https://api.spotify.com/v1/me/player/currently-playing', {\r\n\t\t\theaders: { Authorization: `Bearer ${token}` }\r\n\t\t});\r\n\t\tif (updateSong(result)) {\r\n\t\t\tsetService(result.data);\r\n\t\t}\r\n\t};\r\n\r\n\tuseInterval(() => {\r\n\t\tif (token) {\r\n\t\t\tGetSpotifyCurrentlyPlaying().catch(error => {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t});\r\n\t\t}\r\n\t}, 5000);\r\n\r\n\treturn (\r\n\t\t<AnimatePresence>\r\n\t\t\t{service && service.is_playing && (\r\n\t\t\t\t<motion.div\r\n\t\t\t\t\tinitial={{ translateY: '-100%' }}\r\n\t\t\t\t\tanimate={{ translateY: '0%' }}\r\n\t\t\t\t\texit={{ translateY: '-100%' }}\r\n\t\t\t\t\tclassName=\"currently-playing\"\r\n\t\t\t\t\tstyle={{ width: `calc((100% - ${props.width}px) - 100px)` }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ScrollText>\r\n\t\t\t\t\t\t{service.is_playing &&\r\n\t\t\t\t\t\t\tservice.item &&\r\n\t\t\t\t\t\t\tservice.item.name &&\r\n\t\t\t\t\t\t\tservice.item.artists &&\r\n\t\t\t\t\t\t\t`Currently playing: ${service.item.artists.map(artist => artist.name).join(', ')} - ${service.item.name}`}\r\n\t\t\t\t\t</ScrollText>\r\n\t\t\t\t</motion.div>\r\n\t\t\t)}\r\n\t\t</AnimatePresence>\r\n\t);\r\n};\r\n\r\nexport default CurrentlyPlaying;\r\n","import React, { useState } from 'react';\r\nimport useForm from 'react-hook-form';\r\nimport { resetConfig, loadConfig, saveConfig } from '../util';\r\n\r\nconst Admin: React.FC = () => {\r\n\tconst REDIRECT_URI = `${window.location.protocol + '//' + window.location.host + window.location.pathname}#/spotify-token`;\r\n\tconst { register, handleSubmit } = useForm();\r\n\tconst [config, setConfig] = useState(loadConfig());\r\n\r\n\tconst onSubmit = (data: any) => {\r\n\t\tconst includeCurrentlyPlaying = data.includeCurrentlyPlaying === 'true';\r\n\t\tconst fixedData = { ...loadConfig(), ...data, includeCurrentlyPlaying };\r\n\t\tsetConfig(fixedData);\r\n\t\tsaveConfig(fixedData);\r\n\t};\r\n\r\n\tconst reset = (event?: any) => {\r\n\t\tresetConfig(event);\r\n\t\tsetConfig(loadConfig());\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"wrapper\">\r\n\t\t\t<div className=\"sidebar\">\r\n\t\t\t\t<div className=\"logo\" />\r\n\t\t\t\t<div className=\"sidebar-background\" />\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t{!loadConfig().spotifyToken && (\r\n\t\t\t\t\t\t<a href={`https://evig-nedtur.herokuapp.com/login?returnurl=${encodeURIComponent(REDIRECT_URI)}`} className=\"button spotify\">\r\n\t\t\t\t\t\t\tLogin med Spotify\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{config && config.server && config.nickname && (\r\n\t\t\t\t\t\t<a href={`#/${config!.server.toLowerCase()}/${config.nickname.toLowerCase()}/${config.spotifyToken}`} className=\"button\">\r\n\t\t\t\t\t\t\tGå til overlay\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</nav>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t<div className=\"card-header\">Config</div>\r\n\t\t\t\t\t<div className=\"card-content\">\r\n\t\t\t\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t\t\t\t\t<div className=\"card-group\">\r\n\t\t\t\t\t\t\t\t<div className=\"formgroup\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"server\">Server</label>\r\n\t\t\t\t\t\t\t\t\t<input type=\"text\" defaultValue={config.server} name=\"server\" id=\"server\" ref={register} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"formgroup\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"nickname\">Nickname</label>\r\n\t\t\t\t\t\t\t\t\t<input type=\"text\" defaultValue={config.nickname} name=\"nickname\" id=\"nickname\" ref={register} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"card-group\">\r\n\t\t\t\t\t\t\t\t{config.spotifyToken && (\r\n\t\t\t\t\t\t\t\t\t<div className=\"formgroup\">\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"spotifyToken\">Spotify token</label>\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\tdefaultValue={config.spotifyToken}\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"spotifyToken\"\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"spotifyToken\"\r\n\t\t\t\t\t\t\t\t\t\t\tref={register}\r\n\t\t\t\t\t\t\t\t\t\t\tdisabled={true}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<button className=\"green\" type=\"submit\">\r\n\t\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button className=\"gray\" onClick={reset}>\r\n\t\t\t\t\t\t\t\tReset config\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Admin;\r\n","import Admin from './admin';\r\n\r\nexport default Admin;\r\n","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { Switch, Route, useParams, HashRouter, Redirect } from 'react-router-dom';\nimport CurrentlyPlaying from './CurrentlyPlaying';\nimport Admin from './admin';\nimport { loadConfig, saveConfig } from './util';\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<HashRouter basename=\"/\">\n\t\t\t<div className=\"App full-height\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/\" exact children={<Admin />} />\n\t\t\t\t\t<Route path=\"/admin\" children={<Admin />} />\n\t\t\t\t\t<Route path=\"/spotify-token/:token\" children={<SpotifyTokenHandler />} />\n\t\t\t\t\t<Route path=\"/:server/:nickname/:token?\" children={<Out />} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</HashRouter>\n\t);\n};\n\nconst Out = () => {\n\tlet { server, nickname, token } = useParams();\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst [width, setWidth] = useState(0);\n\tuseEffect(() => {\n\t\tconst width = ref && ref.current && ref.current.offsetWidth ? ref.current.offsetWidth : 0;\n\t\tsetWidth(width);\n\t}, [ref]);\n\n\tsaveConfig({\n\t\t...loadConfig(),\n\t\tserver,\n\t\tnickname\n\t});\n\treturn (\n\t\t<div className=\"cover full-height\">\n\t\t\t<div className=\"top\">\n\t\t\t\t<div className=\"text\" ref={ref}>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{server} / {nickname}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<CurrentlyPlaying width={width} token={token} />\n\t\t\t</div>\n\n\t\t\t<div className=\"area\" />\n\t\t</div>\n\t);\n};\n\nconst SpotifyTokenHandler = () => {\n\tlet { token } = useParams();\n\tsaveConfig({\n\t\t...loadConfig(),\n\t\tspotifyToken: token || ''\n\t});\n\treturn <Redirect to=\"/admin\" />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}