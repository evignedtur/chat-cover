{"version":3,"sources":["admin/admin.tsx","CurrentlyPlaying.tsx","admin/index.ts","callback.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["loadConfig","localStorage","getItem","setItem","JSON","stringify","currentlyPlayingPrefix","includeCurrentlyPlaying","color1","color2","nickname","server","parse","saveConfig","config","Admin","REDIRECT_URI","window","location","protocol","host","pathname","console","log","useForm","register","handleSubmit","useState","setConfig","className","href","encodeURIComponent","toLowerCase","onSubmit","data","fixedData","htmlFor","type","defaultValue","name","id","ref","defaultChecked","value","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","deleteSpotifyData","removeItem","CurrentlyPlaying","props","play","setPlay","service","isPlaying","setIsPlaying","Axios","get","headers","Authorization","then","response","item","catch","error","alert","SpotifyService","is_playing","div","initial","translateY","animate","exit","style","width","artists","map","artist","join","saveSpotifyData","ACCESS_TOKEN","EXPIRES_IN","TOKEN_TYPE","Callback","to","getHashValue","key","matches","hash","match","RegExp","Out","useParams","setWidth","offsetWidth","App","basename","path","exact","children","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2jBAYA,IA0GaA,EAAa,WACzB,IAAKC,aAAaC,QAAQ,UAAW,CASpCD,aAAaE,QAAQ,SAAUC,KAAKC,UARb,CACtBC,uBAAwB,oBACxBC,yBAAyB,EACzBC,OAAQ,iBACRC,OAAQ,iBACRC,SAAU,WACVC,OAAQ,YAIV,OAAOP,KAAKQ,MAAMX,aAAaC,QAAQ,YAG3BW,EAAa,SAACC,GAC1Bb,aAAaE,QAAQ,SAAUC,KAAKC,UAAUS,KAGhCC,EA7HS,WACvB,IAEMC,EAAY,UAAMC,OAAOC,SAASC,SAAS,KAAKF,OAAOC,SAASE,KAAKH,OAAOC,SAASG,SAAzE,cAClBC,QAAQC,IAAIP,GACZ,IAL6B,EAOMQ,cAA3BC,EAPqB,EAOrBA,SAAUC,EAPW,EAOXA,aAPW,EASDC,mBAAS3B,KATR,mBAStBc,EATsB,KASdc,EATc,KAkB7B,OACC,yBAAKC,UAAU,WACd,yBAAKA,UAAU,WACd,yBAAKA,UAAU,SACf,yBAAKA,UAAU,uBACf,8BACG5B,aAAaC,QAAQ,iBACtB,uBACC4B,KAAI,UAzBE,yCAyBF,sBAxBQ,mCAwBR,yBAAgDC,mBAAmBf,GAAnE,kBAA0Fe,mBArBrF,+BAqBL,wBAGJF,UAAU,mBAJX,qBASAf,GACAA,EAAOH,QACPG,EAAOJ,UACN,uBAAGoB,KAAI,YAAOhB,EAAQH,OAAOqB,cAAtB,YAAuClB,EAAOJ,SAASsB,eAAiBH,UAAU,UAAzF,uBAMJ,yBAAKA,UAAU,aACd,yBAAKA,UAAU,QACd,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,gBACd,0BAAMI,SAAUP,GApCJ,SAACQ,GACjB,IACMC,E,yVAAS,IAAQD,EAAR,CAAc3B,wBADoC,SAAjC2B,EAAK3B,0BAErCqB,EAAUO,GACVtB,EAAWsB,OAiCN,yBAAKN,UAAU,cACd,yBAAKA,UAAU,aACd,2BAAOO,QAAQ,UAAf,UACA,2BAAOC,KAAK,OAAOC,aAAcxB,EAAOH,OAAQ4B,KAAK,SAASC,GAAG,SAASC,IAAKhB,KAEhF,yBAAKI,UAAU,aACd,2BAAOO,QAAQ,YAAf,YACA,2BAAOC,KAAK,OAAOC,aAAcxB,EAAOJ,SAAU6B,KAAK,WAAWC,GAAG,WAAWC,IAAKhB,MAGvF,yBAAKI,UAAU,cACd,yBAAKA,UAAU,aACd,2BAAOO,QAAQ,2BAAf,2CACA,2BACCC,KAAK,QACLK,gBAAiB1C,IAAaO,wBAC9BoC,MAAOvC,KAAKC,WAAWL,IAAaO,yBACpCgC,KAAK,0BACLE,IAAKhB,IAEN,2BACCY,KAAK,QACLK,eAAgB1C,IAAaO,wBAC7BoC,MAAOvC,KAAKC,UAAUL,IAAaO,yBACnCgC,KAAK,0BACLE,IAAKhB,KAGP,yBAAKI,UAAU,aACd,2BAAOO,QAAQ,0BAAf,mDACA,2BACCC,KAAK,OACLC,aAAcxB,EAAOR,uBACrBiC,KAAK,yBACLC,GAAG,yBACHC,IAAKhB,MAIR,yBAAKI,UAAU,cACd,yBAAKA,UAAU,aACd,2BAAOO,QAAQ,UAAf,uBACA,2BAAOC,KAAK,OAAOC,aAAcxB,EAAON,OAAQ+B,KAAK,SAASC,GAAG,SAASC,IAAKhB,KAEhF,yBAAKI,UAAU,aACd,2BAAOO,QAAQ,UAAf,4BACA,2BAAOC,KAAK,OAAOC,aAAcxB,EAAOL,OAAQ8B,KAAK,SAASC,GAAG,SAASC,IAAKhB,MAGjF,4BAAQI,UAAU,QAAQQ,KAAK,UAA/B,e,sOClGP,IA8DMO,EAAc,SAACC,EAAeC,GACnC,IAAMC,EAAgBC,iBAAOH,GAC7BI,qBACC,WACCF,EAAcG,QAAUL,IAEzB,CAACA,IAGFI,qBACC,WAIC,GAAc,OAAVH,EAAgB,CACnB,IAAIN,EAAKW,aAJV,WACCJ,EAAeG,YAGYJ,GAC3B,OAAO,kBAAMM,cAAcZ,OAG7B,CAACM,KAIUO,EAAoB,WAChCpD,aAAaqD,WAAW,gBACxBrD,aAAaqD,WAAW,cACxBrD,aAAaqD,WAAW,eAGVC,EA3FsC,SAAAC,GACpD,IAD6D,EA+BrC7B,mBAAS3B,IAAaO,yBA/Be,mBA+BtDkD,EA/BsD,KA+BhDC,EA/BgD,KAgCvD5C,EAASd,IACT2D,EAhCiB,WAAO,IAAD,EACMhC,qBADN,mBACrBiC,EADqB,KACVC,EADU,KA2B5B,OAxBAjB,GAAY,WACP5C,IAAaO,0BAChBmD,GAAQ,GACRI,IAAMC,IAAmC,yDAA0D,CAClGC,QAAS,CAAEC,cAAe,UAAYhE,aAAaC,QAAQ,mBAE1DgE,MAAK,SAAAC,GACAP,EAEMO,EAASjC,KAAKkC,MAAQR,EAAUQ,MAAQD,EAASjC,KAAKkC,KAAK7B,OAASqB,EAAUQ,KAAK7B,MAC7FsB,EAAaM,EAASjC,MAFtB2B,EAAaM,EAASjC,SAKvBmC,OAAM,SAACC,GACPC,MAAMD,GACNjB,IACAxC,E,yVAAW,IACPb,IADM,CAETO,yBAAyB,WAI3B,KAEIqD,EAKQY,GAChB,OACC,kBAAC,IAAD,KACEf,GACAE,GACAA,EAAQc,YACR3D,EAAOP,yBACN,kBAAC,IAAOmE,IAAR,CACCC,QAAS,CAAEC,WAAY,SACvBC,QAAS,CAAED,WAAY,MACvBE,KAAM,CAAEF,WAAY,SACpB/C,UAAU,oBACVkD,MAAO,CAAEC,MAAM,gBAAD,OAAkBxB,EAAMwB,MAAxB,kBAEd,kBAAC,IAAD,KACErB,EAAQc,YACRd,EAAQS,MACRT,EAAQS,KAAK7B,MACboB,EAAQS,KAAKa,SAHb,UAIGnE,EAAOR,uBAAyBQ,EAAOR,uBAAyB,KAAO,GAJ1E,YAIgFqD,EAAQS,KAAKa,QAC3FC,KAAI,SAAAC,GAAM,OAAIA,EAAO5C,QACrB6C,KAAK,MANP,cAMkBzB,EAAQS,KAAK7B,UC/DxBxB,ICYTsE,EAAkB,SAACC,EAA6BC,EAA2BC,GACzEF,GACArF,aAAaE,QAAQ,eAAgBmF,GAErCC,GACAtF,aAAaE,QAAQ,aAAcoF,GAEnCC,GACAvF,aAAaE,QAAQ,aAAcqF,IAI5BC,EAjBsB,SAACjC,GAElC,OADA6B,EAAgB7B,EAAM8B,aAAc9B,EAAM+B,WAAY/B,EAAMgC,YACpD,kBAAC,IAAD,CAAWE,GAAG,Y,8NCH1B,IAsBMC,EAAe,SAACC,GACrB,IAAMC,EAAU5E,OAAOC,SAAS4E,KAAKC,MAAM,IAAIC,OAAOJ,EAAM,aAC5D,OAAOC,EAAUA,EAAQ,GAAK,MAG/B,SAASI,IAAO,IAAD,EACaC,cAArBvF,EADQ,EACRA,OAAQD,EADA,EACAA,SACR+B,EAAMO,iBAAuB,MAFrB,EAIYrB,mBAAS,GAJrB,mBAIPqD,EAJO,KAIAmB,EAJA,KAkBd,OAbAlD,qBACC,WACC,IAAM+B,EAAQvC,GAAOA,EAAIS,SAAWT,EAAIS,QAAQkD,YAAc3D,EAAIS,QAAQkD,YAAc,EACxFD,EAASnB,KAEV,CAACvC,IAGF5B,E,yVAAW,IACPb,IADM,CAETW,SACAD,cAGA,yBAAKmB,UAAU,qBACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,OAAOY,IAAKA,GAC1B,8BACE9B,EADF,MACaD,IAGd,kBAAC,EAAD,CAAkBsE,MAAOA,KAG1B,yBAAKnD,UAAU,UAKHwE,MA7DO,WACrB,IAAMf,EAAeK,EAAa,gBAC5BJ,EAAaI,EAAa,cAC1BH,EAAaG,EAAa,cAChC,OACC,kBAAC,IAAD,CAAYW,SAAS,KACpB,yBAAKzE,UAAU,mBACd,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAO0E,KAAK,IAAIC,OAAK,EAACC,SAAU,kBAAC,EAAD,QAChC,kBAAC,IAAD,CAAOF,KAAK,SAASE,SAAU,kBAAC,EAAD,QAC/B,kBAAC,IAAD,CACCF,KAAK,aACLC,OAAK,EACLC,SAAU,kBAAC,EAAD,CAAUnB,aAAcA,EAAcC,WAAYA,EAAYC,WAAYA,MAErF,kBAAC,IAAD,CAAOe,KAAK,qBAAqBE,SAAU,kBAACR,EAAD,YCX5BS,QACW,cAA7BzF,OAAOC,SAASyF,UAEe,UAA7B1F,OAAOC,SAASyF,UAEhB1F,OAAOC,SAASyF,SAASZ,MACvB,2DCZNa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,kB","file":"static/js/main.14a3a12f.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\r\nimport useForm from 'react-hook-form';\r\n\r\ninterface Config {\r\n\tcurrentlyPlayingPrefix?: string;\r\n\tcolor1?: string;\r\n\tcolor2?: string;\r\n\tincludeCurrentlyPlaying?: boolean;\r\n\tserver?: string;\r\n\tnickname?: string;\r\n}\r\n\r\nconst Admin: React.FC = () => {\r\n\tconst URL = 'https://accounts.spotify.com/authorize';\r\n\tconst CLIENT_ID = '85595b738deb4f078eb60bf45c542d45';\r\n\tconst REDIRECT_URI = `${window.location.protocol+'//'+window.location.host+window.location.pathname}#/callback`;\r\n\tconsole.log(REDIRECT_URI);\r\n\tconst SCOPES = 'user-read-currently-playing';\r\n\r\n\tconst { register, handleSubmit } = useForm();\r\n\r\n\tconst [config, setConfig] = useState(loadConfig());\r\n\r\n\tconst onSubmit = (data: any) => {\r\n\t\tconst includeCurrentlyPlaying = data.includeCurrentlyPlaying === 'true';\r\n\t\tconst fixedData = { ...data, includeCurrentlyPlaying };\r\n\t\tsetConfig(fixedData);\r\n\t\tsaveConfig(fixedData);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"wrapper\">\r\n\t\t\t<div className=\"sidebar\">\r\n\t\t\t\t<div className=\"logo\" />\r\n\t\t\t\t<div className=\"sidebar-background\" />\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t{!localStorage.getItem('ACCESS_TOKEN') && (\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref={`${URL}?client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=${encodeURIComponent(\r\n\t\t\t\t\t\t\t\tSCOPES\r\n\t\t\t\t\t\t\t)}&response_type=token`}\r\n\t\t\t\t\t\t\tclassName=\" button spotify\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tLogin med Spotify\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{config &&\r\n\t\t\t\t\t\tconfig.server &&\r\n\t\t\t\t\t\tconfig.nickname && (\r\n\t\t\t\t\t\t\t<a href={`#/${config!.server.toLowerCase()}/${config.nickname.toLowerCase()}`} className=\"button\">\r\n\t\t\t\t\t\t\t\tGÃ¥ til overlay\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t</nav>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t<div className=\"card-header\">Config</div>\r\n\t\t\t\t\t<div className=\"card-content\">\r\n\t\t\t\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t\t\t\t\t<div className=\"card-group\">\r\n\t\t\t\t\t\t\t\t<div className=\"formgroup\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"server\">Server</label>\r\n\t\t\t\t\t\t\t\t\t<input type=\"text\" defaultValue={config.server} name=\"server\" id=\"server\" ref={register} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"formgroup\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"nickname\">Nickname</label>\r\n\t\t\t\t\t\t\t\t\t<input type=\"text\" defaultValue={config.nickname} name=\"nickname\" id=\"nickname\" ref={register} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"card-group\">\r\n\t\t\t\t\t\t\t\t<div className=\"formgroup\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"includeCurrentlyPlaying\">Include Spotify \"Currently playing\"-bar</label>\r\n\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\t\t\t\t\t\tdefaultChecked={!loadConfig().includeCurrentlyPlaying}\r\n\t\t\t\t\t\t\t\t\t\tvalue={JSON.stringify(!loadConfig().includeCurrentlyPlaying)}\r\n\t\t\t\t\t\t\t\t\t\tname=\"includeCurrentlyPlaying\"\r\n\t\t\t\t\t\t\t\t\t\tref={register}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\t\t\t\t\t\tdefaultChecked={loadConfig().includeCurrentlyPlaying}\r\n\t\t\t\t\t\t\t\t\t\tvalue={JSON.stringify(loadConfig().includeCurrentlyPlaying)}\r\n\t\t\t\t\t\t\t\t\t\tname=\"includeCurrentlyPlaying\"\r\n\t\t\t\t\t\t\t\t\t\tref={register}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"formgroup\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"currentlyPlayingPrefix\">Prefix text for Spotify \"Currently playing\"-bar</label>\r\n\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tdefaultValue={config.currentlyPlayingPrefix}\r\n\t\t\t\t\t\t\t\t\t\tname=\"currentlyPlayingPrefix\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"currentlyPlayingPrefix\"\r\n\t\t\t\t\t\t\t\t\t\tref={register}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"card-group\">\r\n\t\t\t\t\t\t\t\t<div className=\"formgroup\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"color1\">Main color (in rgb)</label>\r\n\t\t\t\t\t\t\t\t\t<input type=\"text\" defaultValue={config.color1} name=\"color1\" id=\"color1\" ref={register} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"formgroup\">\r\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"color2\">Secondary color (in rgb)</label>\r\n\t\t\t\t\t\t\t\t\t<input type=\"text\" defaultValue={config.color2} name=\"color2\" id=\"color2\" ref={register} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<button className=\"green\" type=\"submit\">Lagre</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport const loadConfig = () => {\r\n\tif (!localStorage.getItem('CONFIG')) {\r\n\t\tconst config: Config = {\r\n\t\t\tcurrentlyPlayingPrefix: 'Currently playing',\r\n\t\t\tincludeCurrentlyPlaying: false,\r\n\t\t\tcolor1: 'rgb(155,31,31)',\r\n\t\t\tcolor2: 'rgb(194,76,76)',\r\n\t\t\tnickname: 'Nickname',\r\n\t\t\tserver: 'Server'\r\n\t\t};\r\n\t\tlocalStorage.setItem('CONFIG', JSON.stringify(config));\r\n\t}\r\n\treturn JSON.parse(localStorage.getItem('CONFIG')!) as Config;\r\n};\r\n\r\nexport const saveConfig = (config: Config) => {\r\n\tlocalStorage.setItem('CONFIG', JSON.stringify(config));\r\n};\r\n\r\nexport default Admin;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport ScrollText from 'react-scroll-text';\r\nimport { SpotifyCurrentlyPlayingResult } from './SpotifyCurrentlyPlayingResult';\r\nimport { loadConfig, saveConfig } from './admin/admin';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\n\r\ninterface CurrentlyPlaying {\r\n\twidth: number;\r\n}\r\n\r\nconst CurrentlyPlaying: React.FC<CurrentlyPlaying> = props => {\r\n\tconst SpotifyService = () => {\r\n\t\tconst [isPlaying, setIsPlaying] = useState<SpotifyCurrentlyPlayingResult>();\r\n\r\n\t\tuseInterval(() => {\r\n\t\t\tif (loadConfig().includeCurrentlyPlaying) {\r\n\t\t\t\tsetPlay(true);\r\n\t\t\t\tAxios.get<SpotifyCurrentlyPlayingResult>('https://api.spotify.com/v1/me/player/currently-playing', {\r\n\t\t\t\t\theaders: { Authorization: 'Bearer ' + localStorage.getItem('ACCESS_TOKEN') }\r\n\t\t\t\t})\r\n\t\t\t\t\t.then(response => {\r\n\t\t\t\t\t\tif (!isPlaying) {\r\n\t\t\t\t\t\t\tsetIsPlaying(response.data);\r\n\t\t\t\t\t\t} else if (response.data.item && isPlaying.item && response.data.item.name !== isPlaying.item.name) {\r\n\t\t\t\t\t\t\tsetIsPlaying(response.data);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((error) => {\r\n\t\t\t\t\t\talert(error);\r\n\t\t\t\t\t\tdeleteSpotifyData();\r\n\t\t\t\t\t\tsaveConfig({\r\n\t\t\t\t\t\t\t...loadConfig(),\r\n\t\t\t\t\t\t\tincludeCurrentlyPlaying: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}, 5000);\r\n\r\n\t\treturn isPlaying;\r\n\t};\r\n\r\n\tconst [play, setPlay] = useState(loadConfig().includeCurrentlyPlaying);\r\n\tconst config = loadConfig();\r\n\tconst service = SpotifyService();\r\n\treturn (\r\n\t\t<AnimatePresence>\r\n\t\t\t{play &&\r\n\t\t\t\tservice &&\r\n\t\t\t\tservice.is_playing &&\r\n\t\t\t\tconfig.includeCurrentlyPlaying && (\r\n\t\t\t\t\t<motion.div\r\n\t\t\t\t\t\tinitial={{ translateY: '-100%' }}\r\n\t\t\t\t\t\tanimate={{ translateY: '0%' }}\r\n\t\t\t\t\t\texit={{ translateY: '-100%' }}\r\n\t\t\t\t\t\tclassName=\"currently-playing\"\r\n\t\t\t\t\t\tstyle={{ width: `calc((100% - ${props.width}px) - 100px)` }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<ScrollText>\r\n\t\t\t\t\t\t\t{service.is_playing &&\r\n\t\t\t\t\t\t\t\tservice.item &&\r\n\t\t\t\t\t\t\t\tservice.item.name &&\r\n\t\t\t\t\t\t\t\tservice.item.artists &&\r\n\t\t\t\t\t\t\t\t`${config.currentlyPlayingPrefix ? config.currentlyPlayingPrefix + ': ' : ''} ${service.item.artists\r\n\t\t\t\t\t\t\t\t\t.map(artist => artist.name)\r\n\t\t\t\t\t\t\t\t\t.join(', ')} - ${service.item.name}`}\r\n\t\t\t\t\t\t</ScrollText>\r\n\t\t\t\t\t</motion.div>\r\n\t\t\t\t)}\r\n\t\t</AnimatePresence>\r\n\t);\r\n};\r\n\r\nconst useInterval = (callback: any, delay: number) => {\r\n\tconst savedCallback = useRef(callback);\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tsavedCallback.current = callback;\r\n\t\t},\r\n\t\t[callback]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tfunction tick() {\r\n\t\t\t\tsavedCallback!.current();\r\n\t\t\t}\r\n\t\t\tif (delay !== null) {\r\n\t\t\t\tlet id = setInterval(tick, delay);\r\n\t\t\t\treturn () => clearInterval(id);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[delay]\r\n\t);\r\n};\r\n\r\nexport const deleteSpotifyData = () => {\r\n\tlocalStorage.removeItem('ACCESS_TOKEN');\r\n\tlocalStorage.removeItem('EXPIRES_IN');\r\n\tlocalStorage.removeItem('TOKEN_TYPE');\r\n};\r\n\r\nexport default CurrentlyPlaying;\r\n","import Admin from './admin';\r\n\r\nexport default Admin;\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ninterface Callback {\r\n\tACCESS_TOKEN: string | null;\r\n\tEXPIRES_IN: string | null;\r\n\tTOKEN_TYPE: string | null;\r\n}\r\n\r\nconst Callback: React.FC<Callback> = (props) => {\r\n    saveSpotifyData(props.ACCESS_TOKEN, props.EXPIRES_IN, props.TOKEN_TYPE);\r\n    return  <Redirect  to=\"/admin\" />;\r\n};\r\n\r\nconst saveSpotifyData = (ACCESS_TOKEN: string | null, EXPIRES_IN: string | null, TOKEN_TYPE: string | null) => {\r\n    if (ACCESS_TOKEN) {\r\n        localStorage.setItem('ACCESS_TOKEN', ACCESS_TOKEN);\r\n    }\r\n    if (EXPIRES_IN) {\r\n        localStorage.setItem('EXPIRES_IN', EXPIRES_IN);\r\n    }\r\n    if (TOKEN_TYPE) {\r\n        localStorage.setItem('TOKEN_TYPE', TOKEN_TYPE);\r\n    }\r\n};\r\n\r\nexport default Callback;\r\n","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { Switch, Route, useParams, HashRouter } from 'react-router-dom';\nimport CurrentlyPlaying from './CurrentlyPlaying';\nimport Admin from './admin';\nimport Callback from './callback';\nimport {loadConfig, saveConfig} from \"./admin/admin\";\n\nconst App: React.FC = () => {\n\tconst ACCESS_TOKEN = getHashValue('access_token');\n\tconst EXPIRES_IN = getHashValue('expires_in');\n\tconst TOKEN_TYPE = getHashValue('token_type');\n\treturn (\n\t\t<HashRouter basename=\"/\">\n\t\t\t<div className=\"App full-height\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/\" exact children={<Admin />} />\n\t\t\t\t\t<Route path=\"/admin\" children={<Admin />} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/:callback\"\n\t\t\t\t\t\texact\n\t\t\t\t\t\tchildren={<Callback ACCESS_TOKEN={ACCESS_TOKEN} EXPIRES_IN={EXPIRES_IN} TOKEN_TYPE={TOKEN_TYPE} />}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route path=\"/:server/:nickname\" children={<Out />} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</HashRouter>\n\t);\n};\n\nconst getHashValue = (key: string) => {\n\tconst matches = window.location.hash.match(new RegExp(key + '=([^&]*)'));\n\treturn matches ? matches[1] : null;\n};\n\nfunction Out() {\n\tlet { server, nickname } = useParams();\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tconst [width, setWidth] = useState(0);\n\tuseEffect(\n\t\t() => {\n\t\t\tconst width = ref && ref.current && ref.current.offsetWidth ? ref.current.offsetWidth : 0;\n\t\t\tsetWidth(width);\n\t\t},\n\t\t[ref]\n\t);\n\n\tsaveConfig({\n\t\t...loadConfig(),\n\t\tserver,\n\t\tnickname\n\t});\n\treturn (\n\t\t<div className=\"cover full-height\">\n\t\t\t<div className=\"top\">\n\t\t\t\t<div className=\"text\" ref={ref}>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{server} / {nickname}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<CurrentlyPlaying width={width} />\n\t\t\t</div>\n\n\t\t\t<div className=\"area\" />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}